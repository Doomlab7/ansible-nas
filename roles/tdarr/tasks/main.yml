---
- name: Tdarr Server Docker Container
  docker_container:
    name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    pull: true
    # network_mode: bridge
    ports:
      - " {{ tdarr_webui_port }}":8265 
      - " {{ tdarr_server_port }}":8266
      - " {{ tdarr_internal_node_port }}":8267
      - " {{ tdarr_extra_node_port }}":8268 # Example extra node port
    environment:
        TZ: "{{ ansible_nas_timezone }}"
        PUID: "{{ tdarr_user_id }}"
        PGID: "{{ tdarr_group_id }}"
        UMASK_SET: 002
        serverIP: "{{ tdarr_server_ip }}" 
        serverPort: "{{ tdarr_server_port }}"
        webUIPort: "{{ tdarr_webui_port }}"
        internalNode: true
        nodeID: InternalTdarrNode
        nodeIP: "{{ tdarr_server_ip }}"
        nodePort: "{{ tdarr_internal_node_port }}"
    restart_policy: unless-stopped
    volumes:
      - "{{ tdarr_data_directory }}/config:/app/config:rw"
      - "{{ tdarr_data_directory }}/server:/app/server:rw"
      - "{{ tdarr_data_directory }}/logs:/app/logs:rw"
      - "{{ tdarr_movies_directory }}:/media/movies:rw"
      - "{{ tdarr_tv_directory }}:/media/tv:rw"
      - "{{ tdarr_youtube_directory }}:/media/youtube:rw"
      - "/home/{{ ansible_nas_user }}/transcode_cache":/temp  # dont' want this on ZFS since it'll blow up snapshots
    labels:
      traefik.enable: "{{ tdarr_available_externally }}"
      traefik.http.routers.tdarr.rule: "Host(`{{ tdarr_hostname }}.{{ ansible_nas_domain }}`)"
      traefik.http.routers.tdarr.tls.certresolver: "letsencrypt"
      traefik.http.routers.tdarr.tls.domains[0].main: "{{ ansible_nas_domain }}"
      traefik.http.routers.tdarr.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
      traefik.http.services.tdarr.loadbalancer.server.port: "8265"
      traefik.http.routers.tdarr.middlewares: "default-whitelist@file"

